package tests

import (
	"crypto/rand"
	"fmt"
	"github.com/freignat91/cipher/rsa"
	"testing"
	"time"
)

func TestPrime(t *testing.T) {
	//n1 := rsa.NewDecimal("52342988501")
	//n1 := rsa.NewDecimal("523142598874393")
	//n1 := rsa.NewDecimal("234298461876381763937")
	//n1 := rsa.NewDecimal("2342984618763817638716478618762329834298734982739487239847298374298374982734982735031397")
	n1 := rsa.NewDecimal("234298461876381763871647861876232983429873498273948723984729837429837498273498273503134234523452346623452345523456647333")
	//n1 := rsa.NewDecimal("2544012914098907927507001806264718144730995097052052327624882201711411190494238755706150755011414787487249005102444198383388867776899305593471211596979736925878801644762583203120516486762111934422995549942673629223416643913651720705873173151571754278083601598812820405935171276262589349105529483444909081379")
	//n1 := rsa.NewDecimal("599310591136557686497988780995324511077237125240433656595702765528549274856102326449806291740004601558309653208690059068030184249587213354429204409500733096128557177821316254188770317954011525910969185758890756069529174831800745025304984598536673573553480704114634939045282429566462223239803326465166361123120909607638191213340635957670587782030322246071640536673850420738661618419474537455080351335355964401989000415812670326022116221466073558378475234994510232076840084270315173463369650999357956551530736691389993008853359468206149913501970707788176524422107815250247345398403794831199822394983048405441038721246388333358067774855776052724111921035401161337309509802347450566262823568720156809904932963076149999248433588897138948075967205456010245190275525208668238215612544583747421886607444304004043408079189366554844874998890012070160915031996408723385759514747011160950867075080684877235545109170473387332258279022644413325263820303408601467369291757219532903678642780372661675976997602317105065533635368524940486237173820277709252118060689266239368127231588694700131173204035992016179892056906814037557436968182347680338955606879351573108956729976438974502109834411971289458629505924175483065194167846720666114254702041297317789699321919375469761253636197652804882107590541281405358016154881158456869745145600442108811161499700874518914432584351622513527143230110626124408902992374087200691078980108315423413503735189597033040304913294785668477790524833473489666666053298276411109530207288210985254445903227925308396025292038938768440862099119888805106205305197840894495126988733024750721275234611163466066941881934419718488703729752097666397400568912706060643955283487113732290840031363698838903035692231064975883505553740717418058144488262796711228321354972684806554599227591924426863115682962351174676370677233474194124575366498974600294849926209819804246258431151106492551346980968999904856595968389557418178970089896631837402605753801067679366398438307117219856967216427800596090222219653844586512847216666937126472022074679928075596565824616104662905050146779614647541723206975989059007106606096364199788316282498398430615828184551984415701703578889388661585926644231665171162258085527691559552371513484156662769784472851613316483147335909493807132241381019090889342607337089025877648699075984100941720410606608060004993478664792373924938744828141868668565131402878635953325274819647834997996781157558969053811676218814316662328011419475180895480661431")
	t0 := time.Now()
	prime := rsa.IsPrime(n1)
	if !prime {
		t.Fatalf("Error on IsPrime %s is a prime\n", n1)
	}
	fmt.Printf("%s (%d bit) is prime: %t (%dms)\n", n1, n1.BitLen(), prime, time.Now().Sub(t0).Nanoseconds()/1000000)
	t0 = time.Now()
	n1 = rsa.GetRandomPrime(1024*1, false, false)
	fmt.Printf("Found prime: %s (%d bit) (%dms)\n", n1, n1.BitLen(), time.Now().Sub(t0).Nanoseconds()/1000000)
}

func TestRSA(t *testing.T) {
	keySize := 2048
	publicKey, privateKey, err := rsa.CreateRSAKey(keySize, false, false)
	if err != nil {
		t.Fatalf("Error on RSA Ke generation: %v\n", err)
	}
	size := publicKey.GetRSAKeySize()/8 - 1
	list := make([]byte, size, size)
	for nn := 0; nn < 1000; nn++ {
		rand.Read(list)
		c, _ := publicKey.Encrypt(list, size+1)
		d, _ := privateKey.Decrypt(c, size)
		if len(list) != len(d) {
			t.Fatalf("Error on RSA Decrypt")
		}
		for i, val := range list {
			if i >= len(d) || val != d[i] {
				t.Fatalf("Error on RSA Decrypt")
			}
		}
	}

}
